version: '3.8'

services:
  # 主应用服务
  app:
    build: .
    container_name: intent_recognition_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_HOST=mysql
      - REDIS_HOST=redis
    depends_on:
      - mysql
      - redis
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    networks:
      - intent_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: intent_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD:-root123}
      MYSQL_DATABASE: ${DATABASE_NAME:-intent_recognition_system}
      MYSQL_USER: ${DATABASE_USER:-intent_user}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-root123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docs/design/mysql_schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - intent_network
    restart: unless-stopped
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: intent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - intent_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: intent_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - intent_network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: intent_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - intent_network
    restart: unless-stopped

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: intent_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - intent_network
    restart: unless-stopped
    profiles:
      - production

# 网络定义
networks:
  intent_network:
    driver: bridge

# 数据卷定义
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local